import java.io.*;
import java.util.*;
â€‹
public class Main {
    static ArrayDeque<int []> woods = new ArrayDeque<>();
    static ArrayDeque<int []> deadWoods = new ArrayDeque<>();
    static ArrayDeque<int []> babyWoods = new ArrayDeque<>();
    static int ground[][];
    static int nutrient[][];
    static int [] dx = {-1, 0, 1, 1, 1, 0, -1, -1};
    static int [] dy = {-1, -1, -1, 0, 1, 1, 1, 0};
    static int N;
    
    static void spring() {
        for (int i = 0; i < woods.size();) {
            int [] wood = woods.pollLast();
            int x = wood[0];
            int y = wood[1];
            int age = wood[2];
            if (ground[x][y] >= age) {
                ground[x][y] -= age;
                wood[2] += 1;
                i++;
                woods.addFirst(wood);
            }
            else deadWoods.add(wood);
        }
    }
    
    static void summer() {
        while (!deadWoods.isEmpty()) {
            int [] wood = deadWoods.poll();
            int x = wood[0];
            int y = wood[1];
            int age = wood[2];
            ground[x][y] += age/2;
        }
    }
    
    static void fall() {
        for (int i = 0 ; i < woods.size(); i++) {
            int [] wood = woods.poll();
            int x = wood[0];
            int y = wood[1];
            int age = wood[2];
            if (age % 5 == 0) {
                for (int j = 0; j < 8; j++) {
                    int nx = x + dx[j];
                    int ny = y + dy[j];
                    if (0 <= nx && nx < N && 0 <= ny && ny < N)
                        babyWoods.offer(new int [] {nx, ny, 1});
                }
            }
            woods.offer(wood);
        }
        while (!babyWoods.isEmpty())
            woods.offer(babyWoods.poll());
    }
    
    static void winter() {
        for (int i = 0; i < N; i++ ) 
            for (int j = 0; j < N; j++)
                ground[i][j] += nutrient[i][j];
    }
    
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        int K = Integer.parseInt(st.nextToken());
        ground = new int [N][N];
        nutrient = new int [N][N];
        
        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < N; j++) {
                nutrient[i][j] = Integer.parseInt(st.nextToken());
                ground[i][j] = 5;
            }
        }
        
        for (int i = 0; i < M; i++) {
            st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());
            int age = Integer.parseInt(st.nextToken());
            woods.offer(new int [] {x-1, y-1, age});
        }
        
        for (int i = 0; i < K; i++) {
            spring();
            summer();
            fall();
            winter();
        }
    
        System.out.println(woods.size());
    }
}